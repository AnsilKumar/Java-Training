class Node {
    int data;
    Node next;
    
    public Node(int data) {
        this.data = data;
        this.next = next;
    }
}

class MyLinkedList {
    Node head;
    
    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if(head == null) {
            head = newNode;
            return;
        }
        
        Node temp = head;
        while(temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
    }
    
    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }
    
    public void insertAtPostion(int data, int position) {
        Node newNode = new Node(data);
        
        if(position == 0) {
            insertAtBeginning(data);
            return;
        }
        
        Node temp = head;
        for(int i=0; temp!=null && i<position-1; i++) {
            temp = temp.next;
        }
        
        if(temp == null) {
            System.out.println("Postion out of bounds");
            return;
        }
        
        newNode.next = temp.next;
        temp.next = newNode;
    } 
    
    public void printList() {
        Node temp = head;
        while(temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.print("NULL");
    }
    
}


 
public class LinkedListDemp {
    public static void main(String []args) {
        MyLinkedList list = new MyLinkedList();
        
        list.insertAtEnd(100);
        list.insertAtEnd(500);
        list.insertAtBeginning(1000);
        list.insertAtPostion(700,2);
        
        list.printList();
        
    }
}










// Stack implementation using linked list ( here head side is pushing and poping side)

class Node {
    String data;
    Node next;
    
    public Node(String data) {
        this.data = data;
        this.next = null;
    }
}

class MyLinkedList {
    Node head;
    
    // insertAtStart
    public void push(String data) {
        Node newNode = new Node(data);
        if(head == null) {
            head = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }
    
    // deleteAtStart
    public void pop() {
        if(head == null) {
            return;
        }
        Node temp = head;
        temp = temp.next;
        head = temp;
    }
    
    public void printList() {
        System.out.println();
        Node temp = head;
        if(head == null) {
            System.out.print("LinkedList is empty");
            return;
        }
        while(temp.next != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.print("NULL");
    }
}

public class Main
{
	public static void main(String[] args) {
		MyLinkedList obj1 = new MyLinkedList();
		
		obj1.push("Ansil");
		obj1.push("Shant");
		obj1.push("Anita");
		obj1.push("Vijay");
		obj1.push("Kumar");
				
		obj1.printList();
		
        obj1.pop();
        obj1.printList();
		
		
	}
}




